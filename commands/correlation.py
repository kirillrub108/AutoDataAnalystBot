import os
import pandas as pd

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from utils.file_processing import save_temp_file, remove_temp_directory_by_file, remove_temp_directory_by_msg, get_columns_list, get_numeric_columns
from utils.chart_generation import build_correlation_plot

router = Router()

class CorrelationStates(StatesGroup):
    waiting_for_file = State()
    waiting_for_first_column = State()
    waiting_for_second_column = State()

@router.message(F.text == "/correlation")
async def cmd_correlation(message: Message, state: FSMContext):
    await state.set_state(CorrelationStates.waiting_for_file)
    await message.answer(
        "üìà –ü—Ä–∏—à–ª–∏—Ç–µ Excel-—Ñ–∞–π–ª (.xlsx), —á—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –¥–≤—É–º—è —á–∏—Å–ª–æ–≤—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏.\n",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(CorrelationStates.waiting_for_file, F.document)
async def handle_file(message: Message, state: FSMContext):
    file_path = await save_temp_file(message)
    if not file_path:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx.")
        await state.clear()
        return

    try:
        columns = get_numeric_columns(file_path)
    except Exception as e:
        remove_temp_directory_by_file(file_path)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞: {e}")
        await state.clear()
        return

    if len(columns) < 2:
        remove_temp_directory_by_file(file_path)
        await message.answer("‚ö†Ô∏è –í —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –¥–≤–∞ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–∞.")
        await state.clear()
        return

    await state.update_data(file_path=file_path, columns=columns)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
    keyboard_buttons = [KeyboardButton(text=col) for col in columns]
    grouped_buttons = [keyboard_buttons[i:i + 3] for i in range(0, len(keyboard_buttons), 3)]

    keyboard = ReplyKeyboardMarkup(
        keyboard=grouped_buttons,
        resize_keyboard=True
    )

    await state.set_state(CorrelationStates.waiting_for_first_column)
    await message.answer("üîπ –í—ã–±–µ—Ä–∏—Ç–µ *–ø–µ—Ä–≤—ã–π* —á–∏—Å–ª–æ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü:", reply_markup=keyboard)

@router.message(CorrelationStates.waiting_for_first_column)
async def handle_first_column(message: Message, state: FSMContext):
    data = await state.get_data()
    columns = data["columns"]

    col1 = message.text.strip()
    if col1 not in columns:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(col1=col1)
    await state.set_state(CorrelationStates.waiting_for_second_column)
    await message.answer("üîπ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ *–≤—Ç–æ—Ä–æ–π* —Å—Ç–æ–ª–±–µ—Ü:")

@router.message(CorrelationStates.waiting_for_second_column)
async def handle_second_column(message: Message, state: FSMContext):
    data = await state.get_data()
    file_path = data["file_path"]
    columns = data["columns"]
    col1 = data["col1"]
    col2 = message.text.strip()

    if col2 not in columns:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    if col1 == col2:
        await message.answer("‚ö†Ô∏è –°—Ç–æ–ª–±—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
        return

    try:
        image_path = build_correlation_plot(file_path, col1, col2)
    except ValueError as e:
        await message.answer(f"‚ùå {e}")
        return
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    photo = FSInputFile(path=image_path)
    await message.answer_photo(
        photo=photo,
        caption=f"üìä –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É ¬´{col1}¬ª –∏ ¬´{col2}¬ª"
    )

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–Ω–æ–≤–∞ –≤—ã–±—Ä–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã
    keyboard_buttons = [KeyboardButton(text=col) for col in columns]
    grouped_buttons = [keyboard_buttons[i:i + 3] for i in range(0, len(keyboard_buttons), 3)]

    keyboard = ReplyKeyboardMarkup(
        keyboard=grouped_buttons,
        resize_keyboard=True
    )

    await state.set_state(CorrelationStates.waiting_for_first_column)
    await message.answer(
        "üîÅ –•–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –¥—Ä—É–≥–æ–π –≥—Ä–∞—Ñ–∏–∫?\n–í—ã–±–µ—Ä–∏—Ç–µ *–ø–µ—Ä–≤—ã–π* —Å—Ç–æ–ª–±–µ—Ü:",
        reply_markup=keyboard
    )
