from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from states import ReportStates
from utils.analytics import generate_report
from utils.file_processing import save_temp_file

router = Router()


@router.message(F.text == "/report")
async def cmd_report(message: Message, state: FSMContext):
    await state.set_state(ReportStates.waiting_for_file)
    await message.answer(
        "üìä –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. "
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º/–∞–Ω–≥–ª–∏–π—Å–∫–æ–º (—Ü–µ–Ω–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –¥–∞—Ç–∞).",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(ReportStates.waiting_for_file, F.document)
async def process_file(message: Message, state: FSMContext):
    file_path = await save_temp_file(message)
    if not file_path:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx.")
        await state.clear()
        return

    await state.update_data(file_path=file_path)
    await state.set_state(ReportStates.waiting_for_columns)
    await message.answer(
        "üîç –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n"
        "1. –ö–æ–ª–æ–Ω–∫–∞ —Å –¥–∞—Ç–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–¥–∞—Ç–∞', 'saledate')\n"
        "2. –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '—Ü–µ–Ω–∞', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–∫–∞—Ç–µ–≥–æ—Ä–∏—è')\n"
        "3. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–∫–∞—Ç–µ–≥–æ—Ä–∏—è', '–º–µ—Å—è—Ü', '–∫–ª–∏–µ–Ω—Ç')\n\n"
        "–ü—Ä–∏–º–µ—Ä: `–¥–∞—Ç–∞, —Ü–µ–Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–∞—Ç–µ–≥–æ—Ä–∏—è`"
    )


@router.message(ReportStates.waiting_for_columns)
async def process_columns(message: Message, state: FSMContext):
    user_input = message.text.split(',')
    if len(user_input) != 3:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    date_col = user_input[0].strip().lower()
    analyze_cols = [col.strip() for col in user_input[1].split()]
    group_by = user_input[2].strip().lower()

    data = await state.get_data()
    report, plots = await generate_report(data['file_path'], date_col, analyze_cols, group_by)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    await message.answer(report, parse_mode="Markdown")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    for plot_path in plots:
        with open(plot_path, 'rb') as plot_file:
            await message.answer_photo(plot_file)

    await state.clear()