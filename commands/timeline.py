import os
import pandas as pd

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from utils.file_processing import save_temp_file, remove_temp_directory_by_file, detect_columns, get_numeric_columns
from utils.chart_generation import build_time_series_plot

router = Router()

class TimelineStates(StatesGroup):
    waiting_for_file = State()
    waiting_for_value_column = State()

@router.message(F.text == "/timeline")
async def cmd_timeline(message: Message, state: FSMContext):
    await state.set_state(TimelineStates.waiting_for_file)
    await message.answer(
        "üìà –ü—Ä–∏—à–ª–∏—Ç–µ Excel-—Ñ–∞–π–ª (.xlsx), —á—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥.",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(TimelineStates.waiting_for_file, F.document)
async def handle_file(message: Message, state: FSMContext):
    file_path = await save_temp_file(message)
    if not file_path:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx.")
        await state.clear()
        return

    try:
        df = pd.read_excel(file_path)
        detected = detect_columns(df)
        date_col = detected.get("date_col")
        if not date_col:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞—Ç–æ–π.")
        df[date_col] = pd.to_datetime(df[date_col], errors='coerce')
        if df[date_col].isna().all():
            raise ValueError("–°—Ç–æ–ª–±–µ—Ü —Å –¥–∞—Ç–æ–π –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.")
        df = df.dropna(subset=[date_col])

        numeric_cols = get_numeric_columns(file_path)
        if len(numeric_cols) == 0:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

        await state.update_data(file_path=file_path, date_col=date_col, numeric_cols=numeric_cols)

        keyboard_buttons = [KeyboardButton(text=col) for col in numeric_cols]
        grouped_buttons = [keyboard_buttons[i:i + 3] for i in range(0, len(keyboard_buttons), 3)]
        keyboard = ReplyKeyboardMarkup(keyboard=grouped_buttons, resize_keyboard=True)

        await state.set_state(TimelineStates.waiting_for_value_column)
        await message.answer("üîπ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞:", reply_markup=keyboard)

    except Exception as e:
        remove_temp_directory_by_file(file_path)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await state.clear()

@router.message(TimelineStates.waiting_for_value_column)
async def handle_value_column(message: Message, state: FSMContext):
    value_col = message.text.strip()
    data = await state.get_data()
    numeric_cols = data.get("numeric_cols", [])
    if value_col not in numeric_cols:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    file_path = data["file_path"]
    date_col = data["date_col"]

    try:
        image_paths = build_time_series_plot(file_path, date_col, value_col)
        for path in image_paths:
            photo = FSInputFile(path=path)
            await message.answer_photo(
                photo=photo,
                caption=f"üìä –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –ø–æ —Å—Ç–æ–ª–±—Ü—É ¬´{value_col}¬ª"
            )

        # –°–Ω–æ–≤–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü
        keyboard_buttons = [KeyboardButton(text=col) for col in numeric_cols]
        grouped_buttons = [keyboard_buttons[i:i + 3] for i in range(0, len(keyboard_buttons), 3)]
        keyboard = ReplyKeyboardMarkup(keyboard=grouped_buttons, resize_keyboard=True)

        await message.answer("üîÅ –•–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –¥—Ä—É–≥–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –ø–æ —ç—Ç–æ–º—É –∂–µ —Ñ–∞–π–ª—É?\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –∑–Ω–∞—á–µ–Ω–∏–π.\n"
        "–ò–ª–∏ –Ω–æ–≤—ã–π —Ñ–∞–π–ª /timeline", reply_markup=keyboard)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
