import os

from aiogram import Router, F
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    FSInputFile,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from utils.file_processing import (
    save_temp_file,
    remove_temp_directory_by_file,
    get_columns_list,
    get_numeric_columns,
)
from utils.diagram import build_diagram

router = Router()

class DiagramStates(StatesGroup):
    waiting_for_file = State()
    waiting_for_first_column = State()
    waiting_for_second_column = State()

@router.message(F.text == "/diagram")
async def cmd_diagram(message: Message, state: FSMContext):
    await state.set_state(DiagramStates.waiting_for_file)
    await message.answer(
        "üìä –ü—Ä–∏—à–ª–∏—Ç–µ Excel‚Äë—Ñ–∞–π–ª (.xlsx) —Å –¥–∞–Ω–Ω—ã–º–∏.\n"
        "–ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü ‚Äî –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏), –≤—Ç–æ—Ä–æ–π ‚Äî —á–∏—Å–ª–æ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞.",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(DiagramStates.waiting_for_file, F.document)
async def handle_file(message: Message, state: FSMContext):
    file_path = await save_temp_file(message)
    if not file_path:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω—É–∂–µ–Ω —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return

    try:
        all_columns = get_columns_list(file_path)
        numeric_columns = get_numeric_columns(file_path)
    except Exception as e:
        remove_temp_directory_by_file(file_path)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return

    if len(all_columns) < 2 or not numeric_columns:
        remove_temp_directory_by_file(file_path)
        await message.answer(
            "‚ö†Ô∏è –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å—Ç–æ–ª–±—Ü–∞ –∏ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 1 —á–∏—Å–ª–æ–≤–æ–π.",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        file_path=file_path,
        all_columns=all_columns,
        numeric_columns=numeric_columns
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
    buttons = [KeyboardButton(text=col) for col in all_columns]
    grouped = [buttons[i:i+3] for i in range(0, len(buttons), 3)]
    kb = ReplyKeyboardMarkup(
        keyboard=grouped,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await state.set_state(DiagramStates.waiting_for_first_column)
    await message.answer("üîπ –í—ã–±–µ—Ä–∏—Ç–µ *–ø–µ—Ä–≤—ã–π* —Å—Ç–æ–ª–±–µ—Ü (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏):", reply_markup=kb)

@router.message(DiagramStates.waiting_for_first_column)
async def handle_first_column(message: Message, state: FSMContext):
    data = await state.get_data()
    if message.text not in data["all_columns"]:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(col1=message.text)
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ (—á–∏—Å–ª–æ–≤–æ–≥–æ) —Å—Ç–æ–ª–±—Ü–∞
    buttons = [KeyboardButton(text=col) for col in data["numeric_columns"]]
    grouped = [buttons[i:i+3] for i in range(0, len(buttons), 3)]
    kb = ReplyKeyboardMarkup(
        keyboard=grouped,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await state.set_state(DiagramStates.waiting_for_second_column)
    await message.answer("üîπ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ *–≤—Ç–æ—Ä–æ–π* —Å—Ç–æ–ª–±–µ—Ü (–º–µ—Ç—Ä–∏–∫–∞):", reply_markup=kb)

@router.message(DiagramStates.waiting_for_second_column)
async def handle_second_column(message: Message, state: FSMContext):
    data = await state.get_data()
    file_path = data["file_path"]
    col1 = data["col1"]
    col2 = message.text

    if col2 not in data["numeric_columns"]:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    try:
        image_path = build_diagram(file_path, col1, col2)
    except ValueError as e:
        await message.answer(f"‚ùå {e}")
        return
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≥—Ä–∞—Ñ–∏–∫
    await message.answer_photo(
        photo=FSInputFile(path=image_path),
        caption=f"üìä –î–∏–∞–≥—Ä–∞–º–º–∞: {col1} vs {col2}",
        reply_markup=ReplyKeyboardRemove()
    )

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã
    buttons = [KeyboardButton(text=col) for col in data["all_columns"]]
    grouped = [buttons[i:i+3] for i in range(0, len(buttons), 3)]
    kb = ReplyKeyboardMarkup(
        keyboard=grouped,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await state.set_state(DiagramStates.waiting_for_first_column)
    await message.answer(
        "üîÅ –•–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –¥—Ä—É–≥—É—é –¥–∏–∞–≥—Ä–∞–º–º—É?\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ *–ø–µ—Ä–≤—ã–π* —Å—Ç–æ–ª–±–µ—Ü:",
        reply_markup=kb
    )
