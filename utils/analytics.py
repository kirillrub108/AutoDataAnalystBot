import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import uuid
from typing import Tuple
from aiogram.types import Message
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
import pandas as pd
from states import AggregateStates
from utils.file_processing import save_temp_file, get_numeric_columns, detect_columns

async def analyze_columns(message: Message, df: pd.DataFrame, df_columns: list, text: str):
    text = text.strip()

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è lower‚Äë–≤–µ—Ä—Å–∏–∏ –∏–º–µ–Ω–∏ —Å—Ç–æ–ª–±—Ü–∞ ‚Üí –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è
    col_map = {col.lower(): col for col in df_columns}

    # –†–∞–∑–±–æ—Ä –∑–∞–ø—Ä–æ—Å–∞: —Å—Ç–æ–ª–±–µ—Ü –∏–ª–∏ —Å—Ç–æ–ª–±–µ—Ü:top_n (—Ä–µ–≥–∏—Å—Ç—Ä –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è)
    requests: list[tuple[str, int|None]] = []
    for token in text.split(","):
        token = token.strip()
        if not token:
            continue

        if ":" in token:
            col_token, n = token.split(":", 1)
            col_key = col_token.strip().lower()
            top_n = None
            try:
                top_n = int(n.strip())
            except ValueError:
                top_n = None
        else:
            col_key = token.lower()
            top_n = None

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è —Å—Ç–æ–ª–±—Ü–∞
        real_col = col_map.get(col_key)
        requests.append((real_col, top_n) if real_col else (None, top_n))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Å—Ç–æ–ª–±—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    invalid = [tok for tok, _ in requests if tok is None]
    if invalid:
        await message.answer(
            f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω(—ã) —Å—Ç–æ–ª–±–µ—Ü(—ã): {', '.join(invalid)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    for col, top_n in requests:
        column_data = df[col]
        missing = column_data.isna().sum()
        total = len(column_data)

        header = f"üìå *{col}*"
        parts = [header, f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {missing} –∏–∑ {total} ({round(missing/total*100, 2)}%)"]
        parts.append("*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–æ–ª–±—Ü—É:*")

        if top_n is not None:
            unique = column_data.nunique(dropna=True)
            parts.append(f"  ‚Äì –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {unique}")
            freq = column_data.value_counts(dropna=False).head(top_n)
            parts.append(f"*–¢–æ–ø-{top_n} –ø–æ —á–∞—Å—Ç–æ—Ç–µ:*")
            for val, cnt in freq.items():
                display = val if pd.notna(val) else "<–ø—É—Å—Ç–æ–µ>"
                parts.append(f"  ‚Äì {display}: {cnt}")
        else:
            if pd.api.types.is_numeric_dtype(column_data):
                stats = column_data.describe()
                q1, q3 = column_data.quantile(0.25), column_data.quantile(0.75)
                iqr = q3 - q1
                lower, upper = q1 - 1.5 * iqr, q3 + 1.5 * iqr
                outliers = column_data[(column_data < lower) | (column_data > upper)].count()
                mode = column_data.mode().tolist()
                mode_display = ', '.join(map(str, mode)) if mode else '‚Äì'
                parts += [
                    f"  ‚Äì –°—Ä–µ–¥–Ω–µ–µ: {round(stats['mean'], 2)}",
                    f"  ‚Äì –ú–µ–¥–∏–∞–Ω–∞: {round(column_data.median(), 2)}",
                    f"  ‚Äì –ú–æ–¥–∞: {mode_display}",
                    f"  ‚Äì –ú–∏–Ω: {round(stats['min'], 2)}",
                    f"  ‚Äì –ú–∞–∫—Å: {round(stats['max'], 2)}",
                    f"  ‚Äì –°—Ç. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {round(stats['std'], 2)}",
                    f"  ‚Äì –í—ã–±—Ä–æ—Å—ã: {int(outliers)}",
                ]
            else:
                unique = column_data.nunique(dropna=True)
                parts.append(f"  ‚Äì –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {unique}")
                freq = column_data.value_counts(dropna=False).head(5)
                parts.append(f"*–¢–æ–ø-5 –ø–æ —á–∞—Å—Ç–æ—Ç–µ:*")
                for val, cnt in freq.items():
                    display = val if pd.notna(val) else "<–ø—É—Å—Ç–æ–µ>"
                    parts.append(f"  ‚Äì {display}: {cnt}")

        await message.answer("\n".join(parts), parse_mode="Markdown")

def generate_report(file_path: str) -> Tuple[str, list]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –∏ —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –¥–∏–∞–≥—Ä–∞–º–º–∞–º.
    –ë–∏–∑–Ω–µ—Å‚Äë–º–µ—Ç—Ä–∏–∫–∏:
     - –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ DataFrame
     - –ø—Ä–æ–ø—É—Å–∫–∏/—É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
     - –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
     - —á–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö
     - –≤—ã—Ä—É—á–∫–∞ (price*quantity): total, mean, median, max
     - –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–ø–µ—Ä–≤—ã–µ/–ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞—Ç—ã) –µ—Å–ª–∏ –µ—Å—Ç—å date_col
     - —Ç–æ–ø‚Äë5 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –≤—ã—Ä—É—á–∫–µ
     - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–≤–∞ –≥—Ä–∞—Ñ–∏–∫–∞: –≤—ã—Ä—É—á–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Ç–æ–ø‚Äë5 –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    """
    plots = []
    try:
        df = pd.read_excel(file_path)
        if df.empty:
            return "‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π.", []

        report = ["üìà *–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç –ø–æ —Ñ–∞–π–ª—É:*"]
        report.append(f"‚Ä¢ –°—Ç—Ä–æ–∫: {len(df)}, –°—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns)}")

        # –ü—Ä–æ–ø—É—Å–∫–∏ –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        report.append("\n*–ü—Ä–æ–ø—É—Å–∫–∏ –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏:*")
        for col in df.columns:
            miss = df[col].isna().sum()
            uniq = df[col].nunique(dropna=True)
            report.append(f"  ‚Ä¢ {col}: –ø—Ä–æ–ø—É—â–µ–Ω–æ {miss}, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö {uniq}")

        # –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö
        num_cols = get_numeric_columns(file_path)
        if num_cols:
            report.append("\n*–ß–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã ‚Äî –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*")
            desc = df[num_cols].describe().T
            for col, row in desc.iterrows():
                report.append(
                    f"  ‚Ä¢ {col}: —Å—Ä–µ–¥–Ω–µ–µ={row['mean']:.2f}, –º–µ–¥–∏–∞–Ω–∞={df[col].median():.2f}, \n"
                    f"—Å—Ç. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ={row['std']:.2f}, –º–∏–Ω={row['min']:.2f}, –º–∞–∫—Å={row['max']:.2f}"
                )

        # –ß–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        cat_cols = [c for c in df.columns if c not in num_cols]
        if cat_cols:
            report.append("\n*–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã ‚Äî —Ç–æ–ø‚Äë5 –ø–æ —á–∞—Å—Ç–æ—Ç–µ:*")
            for col in cat_cols:
                top5 = df[col].value_counts(dropna=False).head(5)
                report.append(f"  ‚Ä¢ {col}:")
                for val, cnt in top5.items():
                    disp = val if pd.notna(val) else "<–ø—É—Å—Ç–æ>"
                    report.append(f"      ‚Äì {disp}: {cnt}")

        # –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        detected = detect_columns(df)
        price_col = detected.get('price_col')
        qty_col   = detected.get('quantity_col')
        date_col  = detected.get('date_col')
        prod_col  = detected.get('product_col')
        cat_col   = detected.get('category_col')

        # –í—ã—Ä—É—á–∫–∞
        if price_col and qty_col:
            df['–í—ã—Ä—É—á–∫–∞'] = (
                pd.to_numeric(df[price_col], errors='coerce') *
                pd.to_numeric(df[qty_col], errors='coerce')
            )
            rev = df['–í—ã—Ä—É—á–∫–∞'].dropna()
            report.append("\n*–ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –≤—ã—Ä—É—á–∫–µ:*")
            report.append(f"  ‚Ä¢ –û–±—â–∞—è: {rev.sum():.2f}")
            report.append(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è: {rev.mean():.2f}")
            report.append(f"  ‚Ä¢ –ú–µ–¥–∏–∞–Ω–∞: {rev.median():.2f}")
            report.append(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {rev.max():.2f}")

            # –î–∏–∞–≥—Ä–∞–º–º–∞ –≤—ã—Ä—É—á–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            if cat_col:
                agg_cat = rev.groupby(df[cat_col]).sum().sort_values()
                fig, ax = plt.subplots(figsize=(8,5))
                sns.barplot(x=agg_cat.values, y=agg_cat.index.astype(str), ax=ax)
                ax.set_title("–í—ã—Ä—É—á–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
                plt.tight_layout()
                path_cat = os.path.join(
                    os.path.dirname(file_path),
                    f"rev_by_cat_{uuid.uuid4().hex}.png"
                )
                fig.savefig(path_cat); plt.close(fig)
                plots.append(path_cat)

            # –¢–æ–ø‚Äë5 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –≤—ã—Ä—É—á–∫–µ
            if prod_col:
                top_prod = df.groupby(prod_col)['–í—ã—Ä—É—á–∫–∞'].sum().nlargest(5)
                fig, ax = plt.subplots(figsize=(8,5))
                sns.barplot(x=top_prod.values, y=top_prod.index.astype(str), ax=ax)
                ax.set_title("–¢–æ–ø‚Äë5 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –≤—ã—Ä—É—á–∫–µ")
                plt.tight_layout()
                path_prod = os.path.join(
                    os.path.dirname(file_path),
                    f"top5_prod_{uuid.uuid4().hex}.png"
                )
                fig.savefig(path_prod); plt.close(fig)
                plots.append(path_prod)

        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if date_col:
            df[date_col] = pd.to_datetime(df[date_col], errors='coerce')
            valid_dates = df[date_col].dropna()
            if not valid_dates.empty:
                report.append("\n*–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:*")
                report.append(f"  ‚Ä¢ –ü–µ—Ä–≤–∞—è –¥–∞—Ç–∞: {valid_dates.min().date()}")
                report.append(f"  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞: {valid_dates.max().date()}")
                report.append(f"  ‚Ä¢ –í—Å–µ–≥–æ –ø–µ—Ä–∏–æ–¥–æ–≤: {valid_dates.nunique()}")

        return "\n".join(report), plots

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}", []