import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
from typing import Tuple
from aiogram.types import Message
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
import pandas as pd
from states import AggregateStates
from utils.file_processing import save_temp_file, remove_temp_directory

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
def detect_columns(df: pd.DataFrame) -> dict:
    columns = {
        'date_col': None,
        'price_col': None,
        'quantity_col': None,
        'category_col': None,
        'product_col': None
    }
    for col in df.columns:
        col_lower = col.lower()
        if any(word in col_lower for word in ['–¥–∞—Ç–∞', 'date']):
            columns['date_col'] = col
        if any(word in col_lower for word in ['—Ü–µ–Ω–∞', 'price']):
            columns['price_col'] = col
        if any(word in col_lower for word in ['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'quantity']):
            columns['quantity_col'] = col
        if any(word in col_lower for word in ['–∫–∞—Ç–µ–≥–æ—Ä–∏—è', 'category']):
            columns['category_col'] = col
        if any(word in col_lower for word in ['—Ç–æ–≤–∞—Ä', 'product']):
            columns['product_col'] = col
    return columns

async def analyze_columns(message: Message, df: pd.DataFrame, df_columns: list, text: str):
    text = text.strip()

    # –†–∞–∑–±–æ—Ä –∑–∞–ø—Ä–æ—Å–∞: —Å—Ç–æ–ª–±–µ—Ü –∏–ª–∏ —Å—Ç–æ–ª–±–µ—Ü:top_n
    requests = []
    for token in text.split(","):
        token = token.strip()
        if not token:
            continue
        if ":" in token:
            col, n = token.split(":", 1)
            try:
                top_n = int(n.strip())
            except ValueError:
                top_n = None
            requests.append((col.strip(), top_n))
        else:
            requests.append((token, None))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
    invalid = [col for col, _ in requests if col not in df_columns]
    if invalid:
        await message.answer(
            f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω(—ã) —Å—Ç–æ–ª–±–µ—Ü(—ã): {', '.join(invalid)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    for col, top_n in requests:
        column_data = df[col]
        missing = column_data.isna().sum()
        total = len(column_data)

        header = f"üìå *{col}*"
        parts = [header, f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {missing} –∏–∑ {total} ({round(missing/total*100, 2)}%)"]
        parts.append("*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–æ–ª–±—Ü—É:*")

        if top_n is not None:
            unique = column_data.nunique(dropna=True)
            parts.append(f"  ‚Äì –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {unique}")
            freq = column_data.value_counts(dropna=False).head(top_n)
            parts.append(f"*–¢–æ–ø-{top_n} –ø–æ —á–∞—Å—Ç–æ—Ç–µ:*")
            for val, cnt in freq.items():
                display = val if pd.notna(val) else "<–ø—É—Å—Ç–æ–µ>"
                parts.append(f"  ‚Äì {display}: {cnt}")
        else:
            if pd.api.types.is_numeric_dtype(column_data):
                stats = column_data.describe()
                q1, q3 = column_data.quantile(0.25), column_data.quantile(0.75)
                iqr = q3 - q1
                lower, upper = q1 - 1.5 * iqr, q3 + 1.5 * iqr
                outliers = column_data[(column_data < lower) | (column_data > upper)].count()
                mode = column_data.mode().tolist()
                mode_display = ', '.join(map(str, mode)) if mode else '‚Äì'
                parts += [
                    f"  ‚Äì –°—Ä–µ–¥–Ω–µ–µ: {round(stats['mean'], 2)}",
                    f"  ‚Äì –ú–µ–¥–∏–∞–Ω–∞: {round(column_data.median(), 2)}",
                    f"  ‚Äì –ú–æ–¥–∞: {mode_display}",
                    f"  ‚Äì –ú–∏–Ω: {round(stats['min'], 2)}",
                    f"  ‚Äì –ú–∞–∫—Å: {round(stats['max'], 2)}",
                    f"  ‚Äì –°—Ç. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {round(stats['std'], 2)}",
                    f"  ‚Äì –í—ã–±—Ä–æ—Å—ã: {int(outliers)}",
                ]
            else:
                unique = column_data.nunique(dropna=True)
                parts.append(f"  ‚Äì –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {unique}")
                freq = column_data.value_counts(dropna=False).head(5)
                parts.append(f"*–¢–æ–ø-5 –ø–æ —á–∞—Å—Ç–æ—Ç–µ:*")
                for val, cnt in freq.items():
                    display = val if pd.notna(val) else "<–ø—É—Å—Ç–æ–µ>"
                    parts.append(f"  ‚Äì {display}: {cnt}")

        await message.answer("\n".join(parts), parse_mode="Markdown")

async def generate_report(file_path: str, date_col: str, analyze_cols: list, group_by: str) -> Tuple[str, list]:
    plots = []
    try:
        df = pd.read_excel(file_path)
        if df.empty:
            return "‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π.", []

        detected = detect_columns(df)
        report = ["üìà *–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç:*"]

        # –†–∞—Å—á–µ—Ç –≤—ã—Ä—É—á–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if detected['price_col'] and detected['quantity_col']:
            df['–í—ã—Ä—É—á–∫–∞'] = df[detected['price_col']] * df[detected['quantity_col']]
            analyze_cols.append('–í—ã—Ä—É—á–∫–∞')

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if group_by and detected['date_col']:
            df[detected['date_col']] = pd.to_datetime(df[detected['date_col']], errors='coerce')
            df['–ú–µ—Å—è—Ü'] = df[detected['date_col']].dt.to_period('M')
            grouped = df.groupby([group_by, '–ú–µ—Å—è—Ü'])[analyze_cols].agg(['sum', 'mean'])
            report.append(f"\nüìÖ *–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ {group_by}:*\n```{grouped.head().to_string()}```")

        # –¢–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤—ã—Ä—É—á–∫–µ
        if '–í—ã—Ä—É—á–∫–∞' in df.columns and detected['product_col']:
            top_products = df.nlargest(5, '–í—ã—Ä—É—á–∫–∞')[[detected['product_col'], '–í—ã—Ä—É—á–∫–∞']]
            report.append("\nüèÜ *–¢–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤:*")
            for _, row in top_products.iterrows():
                report.append(f"  ‚Ä¢ {row[detected['product_col']]}: {row['–í—ã—Ä—É—á–∫–∞']} ‚ÇΩ")

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        plt.figure()
        sns.barplot(data=df, x=detected['category_col'], y='–í—ã—Ä—É—á–∫–∞', estimator=sum)
        plt.title('–í—ã—Ä—É—á–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
        plot_path = 'sales_by_category.png'
        plt.savefig(plot_path)
        plots.append(plot_path)

        return "\n".join(report), plots

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", []
    finally:
        if os.path.exists(file_path):
            os.remove(file_path)